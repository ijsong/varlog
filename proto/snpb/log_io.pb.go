// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/snpb/log_io.proto

package snpb

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"

	github_com_kakao_varlog_pkg_types "github.com/kakao/varlog/pkg/types"
	varlogpb "github.com/kakao/varlog/proto/varlogpb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AppendRequest is a message to send a payload to a storage node. It contains
// a vector of storage nodes to replicate the payload.
type AppendRequest struct {
	TopicID     github_com_kakao_varlog_pkg_types.TopicID     `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3,casttype=github.com/kakao/varlog/pkg/types.TopicID" json:"topic_id,omitempty"`
	LogStreamID github_com_kakao_varlog_pkg_types.LogStreamID `protobuf:"varint,2,opt,name=log_stream_id,json=logStreamId,proto3,casttype=github.com/kakao/varlog/pkg/types.LogStreamID" json:"log_stream_id,omitempty"`
	Payload     [][]byte                                      `protobuf:"bytes,3,rep,name=payload,proto3" json:"payload,omitempty"`
}

func (m *AppendRequest) Reset()         { *m = AppendRequest{} }
func (m *AppendRequest) String() string { return proto.CompactTextString(m) }
func (*AppendRequest) ProtoMessage()    {}
func (*AppendRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7692726f23e518ee, []int{0}
}
func (m *AppendRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppendRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppendRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppendRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppendRequest.Merge(m, src)
}
func (m *AppendRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *AppendRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AppendRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AppendRequest proto.InternalMessageInfo

func (m *AppendRequest) GetTopicID() github_com_kakao_varlog_pkg_types.TopicID {
	if m != nil {
		return m.TopicID
	}
	return 0
}

func (m *AppendRequest) GetLogStreamID() github_com_kakao_varlog_pkg_types.LogStreamID {
	if m != nil {
		return m.LogStreamID
	}
	return 0
}

func (m *AppendRequest) GetPayload() [][]byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type AppendResult struct {
	Meta  varlogpb.LogEntryMeta `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	Error string                `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *AppendResult) Reset()         { *m = AppendResult{} }
func (m *AppendResult) String() string { return proto.CompactTextString(m) }
func (*AppendResult) ProtoMessage()    {}
func (*AppendResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_7692726f23e518ee, []int{1}
}
func (m *AppendResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppendResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppendResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppendResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppendResult.Merge(m, src)
}
func (m *AppendResult) XXX_Size() int {
	return m.ProtoSize()
}
func (m *AppendResult) XXX_DiscardUnknown() {
	xxx_messageInfo_AppendResult.DiscardUnknown(m)
}

var xxx_messageInfo_AppendResult proto.InternalMessageInfo

func (m *AppendResult) GetMeta() varlogpb.LogEntryMeta {
	if m != nil {
		return m.Meta
	}
	return varlogpb.LogEntryMeta{}
}

func (m *AppendResult) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// AppendResponse is a response message of Append RPC.
type AppendResponse struct {
	Results []AppendResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results"`
}

func (m *AppendResponse) Reset()         { *m = AppendResponse{} }
func (m *AppendResponse) String() string { return proto.CompactTextString(m) }
func (*AppendResponse) ProtoMessage()    {}
func (*AppendResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7692726f23e518ee, []int{2}
}
func (m *AppendResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppendResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppendResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppendResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppendResponse.Merge(m, src)
}
func (m *AppendResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *AppendResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AppendResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AppendResponse proto.InternalMessageInfo

func (m *AppendResponse) GetResults() []AppendResult {
	if m != nil {
		return m.Results
	}
	return nil
}

// ReadRequest asks a storage node to retrieve log entry at the GLSN.
type ReadRequest struct {
	GLSN        github_com_kakao_varlog_pkg_types.GLSN        `protobuf:"varint,1,opt,name=glsn,proto3,casttype=github.com/kakao/varlog/pkg/types.GLSN" json:"glsn,omitempty"`
	TopicID     github_com_kakao_varlog_pkg_types.TopicID     `protobuf:"varint,2,opt,name=topic_id,json=topicId,proto3,casttype=github.com/kakao/varlog/pkg/types.TopicID" json:"topic_id,omitempty"`
	LogStreamID github_com_kakao_varlog_pkg_types.LogStreamID `protobuf:"varint,3,opt,name=log_stream_id,json=logStreamId,proto3,casttype=github.com/kakao/varlog/pkg/types.LogStreamID" json:"log_stream_id,omitempty"`
}

func (m *ReadRequest) Reset()         { *m = ReadRequest{} }
func (m *ReadRequest) String() string { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()    {}
func (*ReadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7692726f23e518ee, []int{3}
}
func (m *ReadRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReadRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadRequest.Merge(m, src)
}
func (m *ReadRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ReadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReadRequest proto.InternalMessageInfo

func (m *ReadRequest) GetGLSN() github_com_kakao_varlog_pkg_types.GLSN {
	if m != nil {
		return m.GLSN
	}
	return 0
}

func (m *ReadRequest) GetTopicID() github_com_kakao_varlog_pkg_types.TopicID {
	if m != nil {
		return m.TopicID
	}
	return 0
}

func (m *ReadRequest) GetLogStreamID() github_com_kakao_varlog_pkg_types.LogStreamID {
	if m != nil {
		return m.LogStreamID
	}
	return 0
}

// ReadResponse contains the contents of the log entry which is retrieved by
// the ReadRequest.
type ReadResponse struct {
	GLSN    github_com_kakao_varlog_pkg_types.GLSN `protobuf:"varint,1,opt,name=glsn,proto3,casttype=github.com/kakao/varlog/pkg/types.GLSN" json:"glsn,omitempty"`
	LLSN    github_com_kakao_varlog_pkg_types.LLSN `protobuf:"varint,2,opt,name=llsn,proto3,casttype=github.com/kakao/varlog/pkg/types.LLSN" json:"llsn,omitempty"`
	Payload []byte                                 `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *ReadResponse) Reset()         { *m = ReadResponse{} }
func (m *ReadResponse) String() string { return proto.CompactTextString(m) }
func (*ReadResponse) ProtoMessage()    {}
func (*ReadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7692726f23e518ee, []int{4}
}
func (m *ReadResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReadResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadResponse.Merge(m, src)
}
func (m *ReadResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ReadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReadResponse proto.InternalMessageInfo

func (m *ReadResponse) GetGLSN() github_com_kakao_varlog_pkg_types.GLSN {
	if m != nil {
		return m.GLSN
	}
	return 0
}

func (m *ReadResponse) GetLLSN() github_com_kakao_varlog_pkg_types.LLSN {
	if m != nil {
		return m.LLSN
	}
	return 0
}

func (m *ReadResponse) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

// SubscribeRequest has GLSN which indicates an inclusive starting position
// from which a client wants to receive.
type SubscribeRequest struct {
	GLSNBegin   github_com_kakao_varlog_pkg_types.GLSN        `protobuf:"varint,1,opt,name=glsn_begin,json=glsnBegin,proto3,casttype=github.com/kakao/varlog/pkg/types.GLSN" json:"glsn_begin,omitempty"`
	GLSNEnd     github_com_kakao_varlog_pkg_types.GLSN        `protobuf:"varint,2,opt,name=glsn_end,json=glsnEnd,proto3,casttype=github.com/kakao/varlog/pkg/types.GLSN" json:"glsn_end,omitempty"`
	TopicID     github_com_kakao_varlog_pkg_types.TopicID     `protobuf:"varint,3,opt,name=topic_id,json=topicId,proto3,casttype=github.com/kakao/varlog/pkg/types.TopicID" json:"topic_id,omitempty"`
	LogStreamID github_com_kakao_varlog_pkg_types.LogStreamID `protobuf:"varint,4,opt,name=log_stream_id,json=logStreamId,proto3,casttype=github.com/kakao/varlog/pkg/types.LogStreamID" json:"log_stream_id,omitempty"`
}

func (m *SubscribeRequest) Reset()         { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()    {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7692726f23e518ee, []int{5}
}
func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(m, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

func (m *SubscribeRequest) GetGLSNBegin() github_com_kakao_varlog_pkg_types.GLSN {
	if m != nil {
		return m.GLSNBegin
	}
	return 0
}

func (m *SubscribeRequest) GetGLSNEnd() github_com_kakao_varlog_pkg_types.GLSN {
	if m != nil {
		return m.GLSNEnd
	}
	return 0
}

func (m *SubscribeRequest) GetTopicID() github_com_kakao_varlog_pkg_types.TopicID {
	if m != nil {
		return m.TopicID
	}
	return 0
}

func (m *SubscribeRequest) GetLogStreamID() github_com_kakao_varlog_pkg_types.LogStreamID {
	if m != nil {
		return m.LogStreamID
	}
	return 0
}

// SubscribeResponse comprises the contents of the log entry and its GLSN.
type SubscribeResponse struct {
	GLSN    github_com_kakao_varlog_pkg_types.GLSN `protobuf:"varint,1,opt,name=glsn,proto3,casttype=github.com/kakao/varlog/pkg/types.GLSN" json:"glsn,omitempty"`
	LLSN    github_com_kakao_varlog_pkg_types.LLSN `protobuf:"varint,2,opt,name=llsn,proto3,casttype=github.com/kakao/varlog/pkg/types.LLSN" json:"llsn,omitempty"`
	Payload []byte                                 `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *SubscribeResponse) Reset()         { *m = SubscribeResponse{} }
func (m *SubscribeResponse) String() string { return proto.CompactTextString(m) }
func (*SubscribeResponse) ProtoMessage()    {}
func (*SubscribeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7692726f23e518ee, []int{6}
}
func (m *SubscribeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeResponse.Merge(m, src)
}
func (m *SubscribeResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SubscribeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeResponse proto.InternalMessageInfo

func (m *SubscribeResponse) GetGLSN() github_com_kakao_varlog_pkg_types.GLSN {
	if m != nil {
		return m.GLSN
	}
	return 0
}

func (m *SubscribeResponse) GetLLSN() github_com_kakao_varlog_pkg_types.LLSN {
	if m != nil {
		return m.LLSN
	}
	return 0
}

func (m *SubscribeResponse) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type SubscribeToRequest struct {
	TopicID     github_com_kakao_varlog_pkg_types.TopicID     `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3,casttype=github.com/kakao/varlog/pkg/types.TopicID" json:"topic_id,omitempty"`
	LogStreamID github_com_kakao_varlog_pkg_types.LogStreamID `protobuf:"varint,2,opt,name=log_stream_id,json=logStreamId,proto3,casttype=github.com/kakao/varlog/pkg/types.LogStreamID" json:"log_stream_id,omitempty"`
	LLSNBegin   github_com_kakao_varlog_pkg_types.LLSN        `protobuf:"varint,3,opt,name=llsn_begin,json=llsnBegin,proto3,casttype=github.com/kakao/varlog/pkg/types.LLSN" json:"llsn_begin,omitempty"`
	LLSNEnd     github_com_kakao_varlog_pkg_types.LLSN        `protobuf:"varint,4,opt,name=llsn_end,json=llsnEnd,proto3,casttype=github.com/kakao/varlog/pkg/types.LLSN" json:"llsn_end,omitempty"`
}

func (m *SubscribeToRequest) Reset()         { *m = SubscribeToRequest{} }
func (m *SubscribeToRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeToRequest) ProtoMessage()    {}
func (*SubscribeToRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7692726f23e518ee, []int{7}
}
func (m *SubscribeToRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeToRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeToRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeToRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeToRequest.Merge(m, src)
}
func (m *SubscribeToRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SubscribeToRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeToRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeToRequest proto.InternalMessageInfo

func (m *SubscribeToRequest) GetTopicID() github_com_kakao_varlog_pkg_types.TopicID {
	if m != nil {
		return m.TopicID
	}
	return 0
}

func (m *SubscribeToRequest) GetLogStreamID() github_com_kakao_varlog_pkg_types.LogStreamID {
	if m != nil {
		return m.LogStreamID
	}
	return 0
}

func (m *SubscribeToRequest) GetLLSNBegin() github_com_kakao_varlog_pkg_types.LLSN {
	if m != nil {
		return m.LLSNBegin
	}
	return 0
}

func (m *SubscribeToRequest) GetLLSNEnd() github_com_kakao_varlog_pkg_types.LLSN {
	if m != nil {
		return m.LLSNEnd
	}
	return 0
}

type SubscribeToResponse struct {
	LogEntry varlogpb.LogEntry `protobuf:"bytes,1,opt,name=log_entry,json=logEntry,proto3" json:"log_entry"`
}

func (m *SubscribeToResponse) Reset()         { *m = SubscribeToResponse{} }
func (m *SubscribeToResponse) String() string { return proto.CompactTextString(m) }
func (*SubscribeToResponse) ProtoMessage()    {}
func (*SubscribeToResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7692726f23e518ee, []int{8}
}
func (m *SubscribeToResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeToResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeToResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeToResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeToResponse.Merge(m, src)
}
func (m *SubscribeToResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *SubscribeToResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeToResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeToResponse proto.InternalMessageInfo

func (m *SubscribeToResponse) GetLogEntry() varlogpb.LogEntry {
	if m != nil {
		return m.LogEntry
	}
	return varlogpb.LogEntry{}
}

// TrimRequest contains inclusive GLSN until which a client wants to delete.
// If async field is true, the trim operation returns immediately and the
// storage node removes its log entry in the background.
type TrimDeprecatedRequest struct {
	TopicID github_com_kakao_varlog_pkg_types.TopicID `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3,casttype=github.com/kakao/varlog/pkg/types.TopicID" json:"topic_id,omitempty"`
	GLSN    github_com_kakao_varlog_pkg_types.GLSN    `protobuf:"varint,2,opt,name=glsn,proto3,casttype=github.com/kakao/varlog/pkg/types.GLSN" json:"glsn,omitempty"`
}

func (m *TrimDeprecatedRequest) Reset()         { *m = TrimDeprecatedRequest{} }
func (m *TrimDeprecatedRequest) String() string { return proto.CompactTextString(m) }
func (*TrimDeprecatedRequest) ProtoMessage()    {}
func (*TrimDeprecatedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7692726f23e518ee, []int{9}
}
func (m *TrimDeprecatedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrimDeprecatedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrimDeprecatedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrimDeprecatedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrimDeprecatedRequest.Merge(m, src)
}
func (m *TrimDeprecatedRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *TrimDeprecatedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TrimDeprecatedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TrimDeprecatedRequest proto.InternalMessageInfo

func (m *TrimDeprecatedRequest) GetTopicID() github_com_kakao_varlog_pkg_types.TopicID {
	if m != nil {
		return m.TopicID
	}
	return 0
}

func (m *TrimDeprecatedRequest) GetGLSN() github_com_kakao_varlog_pkg_types.GLSN {
	if m != nil {
		return m.GLSN
	}
	return 0
}

type LogStreamMetadataRequest struct {
	TopicID     github_com_kakao_varlog_pkg_types.TopicID     `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3,casttype=github.com/kakao/varlog/pkg/types.TopicID" json:"topic_id,omitempty"`
	LogStreamID github_com_kakao_varlog_pkg_types.LogStreamID `protobuf:"varint,2,opt,name=log_stream_id,json=logStreamId,proto3,casttype=github.com/kakao/varlog/pkg/types.LogStreamID" json:"log_stream_id,omitempty"`
}

func (m *LogStreamMetadataRequest) Reset()         { *m = LogStreamMetadataRequest{} }
func (m *LogStreamMetadataRequest) String() string { return proto.CompactTextString(m) }
func (*LogStreamMetadataRequest) ProtoMessage()    {}
func (*LogStreamMetadataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7692726f23e518ee, []int{10}
}
func (m *LogStreamMetadataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogStreamMetadataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogStreamMetadataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogStreamMetadataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogStreamMetadataRequest.Merge(m, src)
}
func (m *LogStreamMetadataRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *LogStreamMetadataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LogStreamMetadataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LogStreamMetadataRequest proto.InternalMessageInfo

func (m *LogStreamMetadataRequest) GetTopicID() github_com_kakao_varlog_pkg_types.TopicID {
	if m != nil {
		return m.TopicID
	}
	return 0
}

func (m *LogStreamMetadataRequest) GetLogStreamID() github_com_kakao_varlog_pkg_types.LogStreamID {
	if m != nil {
		return m.LogStreamID
	}
	return 0
}

type LogStreamMetadataResponse struct {
	LogStreamDescriptor varlogpb.LogStreamDescriptor `protobuf:"bytes,1,opt,name=log_stream_descriptor,json=logStreamDescriptor,proto3" json:"log_stream_descriptor"`
}

func (m *LogStreamMetadataResponse) Reset()         { *m = LogStreamMetadataResponse{} }
func (m *LogStreamMetadataResponse) String() string { return proto.CompactTextString(m) }
func (*LogStreamMetadataResponse) ProtoMessage()    {}
func (*LogStreamMetadataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7692726f23e518ee, []int{11}
}
func (m *LogStreamMetadataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogStreamMetadataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogStreamMetadataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogStreamMetadataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogStreamMetadataResponse.Merge(m, src)
}
func (m *LogStreamMetadataResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *LogStreamMetadataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LogStreamMetadataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LogStreamMetadataResponse proto.InternalMessageInfo

func (m *LogStreamMetadataResponse) GetLogStreamDescriptor() varlogpb.LogStreamDescriptor {
	if m != nil {
		return m.LogStreamDescriptor
	}
	return varlogpb.LogStreamDescriptor{}
}

type LogStreamReplicaMetadataRequest struct {
	TopicID     github_com_kakao_varlog_pkg_types.TopicID     `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3,casttype=github.com/kakao/varlog/pkg/types.TopicID" json:"topic_id,omitempty"`
	LogStreamID github_com_kakao_varlog_pkg_types.LogStreamID `protobuf:"varint,2,opt,name=log_stream_id,json=logStreamId,proto3,casttype=github.com/kakao/varlog/pkg/types.LogStreamID" json:"log_stream_id,omitempty"`
}

func (m *LogStreamReplicaMetadataRequest) Reset()         { *m = LogStreamReplicaMetadataRequest{} }
func (m *LogStreamReplicaMetadataRequest) String() string { return proto.CompactTextString(m) }
func (*LogStreamReplicaMetadataRequest) ProtoMessage()    {}
func (*LogStreamReplicaMetadataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7692726f23e518ee, []int{12}
}
func (m *LogStreamReplicaMetadataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogStreamReplicaMetadataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogStreamReplicaMetadataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogStreamReplicaMetadataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogStreamReplicaMetadataRequest.Merge(m, src)
}
func (m *LogStreamReplicaMetadataRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *LogStreamReplicaMetadataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LogStreamReplicaMetadataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LogStreamReplicaMetadataRequest proto.InternalMessageInfo

func (m *LogStreamReplicaMetadataRequest) GetTopicID() github_com_kakao_varlog_pkg_types.TopicID {
	if m != nil {
		return m.TopicID
	}
	return 0
}

func (m *LogStreamReplicaMetadataRequest) GetLogStreamID() github_com_kakao_varlog_pkg_types.LogStreamID {
	if m != nil {
		return m.LogStreamID
	}
	return 0
}

type LogStreamReplicaMetadataResponse struct {
	LogStreamReplica LogStreamReplicaMetadataDescriptor `protobuf:"bytes,1,opt,name=log_stream_replica,json=logStreamReplica,proto3" json:"log_stream_replica"`
}

func (m *LogStreamReplicaMetadataResponse) Reset()         { *m = LogStreamReplicaMetadataResponse{} }
func (m *LogStreamReplicaMetadataResponse) String() string { return proto.CompactTextString(m) }
func (*LogStreamReplicaMetadataResponse) ProtoMessage()    {}
func (*LogStreamReplicaMetadataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7692726f23e518ee, []int{13}
}
func (m *LogStreamReplicaMetadataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogStreamReplicaMetadataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogStreamReplicaMetadataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogStreamReplicaMetadataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogStreamReplicaMetadataResponse.Merge(m, src)
}
func (m *LogStreamReplicaMetadataResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *LogStreamReplicaMetadataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LogStreamReplicaMetadataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LogStreamReplicaMetadataResponse proto.InternalMessageInfo

func (m *LogStreamReplicaMetadataResponse) GetLogStreamReplica() LogStreamReplicaMetadataDescriptor {
	if m != nil {
		return m.LogStreamReplica
	}
	return LogStreamReplicaMetadataDescriptor{}
}

func init() {
	proto.RegisterType((*AppendRequest)(nil), "varlog.snpb.AppendRequest")
	proto.RegisterType((*AppendResult)(nil), "varlog.snpb.AppendResult")
	proto.RegisterType((*AppendResponse)(nil), "varlog.snpb.AppendResponse")
	proto.RegisterType((*ReadRequest)(nil), "varlog.snpb.ReadRequest")
	proto.RegisterType((*ReadResponse)(nil), "varlog.snpb.ReadResponse")
	proto.RegisterType((*SubscribeRequest)(nil), "varlog.snpb.SubscribeRequest")
	proto.RegisterType((*SubscribeResponse)(nil), "varlog.snpb.SubscribeResponse")
	proto.RegisterType((*SubscribeToRequest)(nil), "varlog.snpb.SubscribeToRequest")
	proto.RegisterType((*SubscribeToResponse)(nil), "varlog.snpb.SubscribeToResponse")
	proto.RegisterType((*TrimDeprecatedRequest)(nil), "varlog.snpb.TrimDeprecatedRequest")
	proto.RegisterType((*LogStreamMetadataRequest)(nil), "varlog.snpb.LogStreamMetadataRequest")
	proto.RegisterType((*LogStreamMetadataResponse)(nil), "varlog.snpb.LogStreamMetadataResponse")
	proto.RegisterType((*LogStreamReplicaMetadataRequest)(nil), "varlog.snpb.LogStreamReplicaMetadataRequest")
	proto.RegisterType((*LogStreamReplicaMetadataResponse)(nil), "varlog.snpb.LogStreamReplicaMetadataResponse")
}

func init() { proto.RegisterFile("proto/snpb/log_io.proto", fileDescriptor_7692726f23e518ee) }

var fileDescriptor_7692726f23e518ee = []byte{
	// 903 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x57, 0x41, 0x8f, 0xdb, 0x44,
	0x14, 0x8e, 0x13, 0x6f, 0xb3, 0x79, 0xd9, 0x56, 0x65, 0x96, 0xd2, 0xc4, 0x55, 0xe3, 0xc8, 0x42,
	0x68, 0x91, 0x58, 0x1b, 0x05, 0xa1, 0x82, 0x54, 0x24, 0x08, 0x9b, 0xa2, 0x15, 0xe9, 0x82, 0x9c,
	0xa8, 0x07, 0x24, 0x58, 0xd9, 0xf1, 0x60, 0xac, 0x9d, 0x78, 0x8c, 0xed, 0x20, 0x45, 0xfc, 0x00,
	0xae, 0xfd, 0x09, 0xfc, 0x08, 0x0e, 0x5c, 0xb8, 0xf7, 0xd8, 0x0b, 0x12, 0x07, 0x94, 0x43, 0xc2,
	0x7f, 0x40, 0x54, 0x1c, 0xd0, 0x8c, 0xc7, 0x8e, 0xbd, 0x4d, 0xb4, 0x1b, 0xd1, 0x1c, 0x76, 0x6f,
	0x9e, 0x99, 0xf7, 0xbe, 0x79, 0xef, 0x7b, 0x9f, 0xde, 0x3c, 0xc3, 0xdd, 0x20, 0xa4, 0x31, 0x35,
	0x22, 0x3f, 0xb0, 0x0d, 0x42, 0xdd, 0x53, 0x8f, 0xea, 0x7c, 0x07, 0xd5, 0x7f, 0xb0, 0x42, 0x42,
	0x5d, 0x9d, 0x9d, 0x28, 0x87, 0xae, 0x17, 0x7f, 0x37, 0xb1, 0xf5, 0x11, 0x1d, 0x1b, 0x2e, 0x75,
	0xa9, 0xc1, 0x6d, 0xec, 0xc9, 0xb7, 0x7c, 0x95, 0x40, 0xb0, 0xaf, 0xc4, 0x57, 0xb9, 0xe7, 0x52,
	0xea, 0x12, 0xbc, 0xb4, 0xc2, 0xe3, 0x20, 0x9e, 0x8a, 0xc3, 0xbb, 0x09, 0x70, 0x60, 0x1b, 0x63,
	0x1c, 0x5b, 0x8e, 0x15, 0x5b, 0xe2, 0x60, 0x9f, 0x07, 0x51, 0xdc, 0xd4, 0xfe, 0x92, 0xe0, 0xe6,
	0x27, 0x41, 0x80, 0x7d, 0xc7, 0xc4, 0xdf, 0x4f, 0x70, 0x14, 0xa3, 0x01, 0xec, 0xc6, 0x34, 0xf0,
	0x46, 0xa7, 0x9e, 0xd3, 0x90, 0xda, 0xd2, 0xc1, 0x4e, 0xf7, 0x83, 0xf9, 0x4c, 0xad, 0x0e, 0xd9,
	0xde, 0xf1, 0xd1, 0x8b, 0x99, 0xfa, 0x76, 0x2e, 0xd8, 0x33, 0xeb, 0xcc, 0xa2, 0x46, 0x72, 0xa3,
	0x11, 0x9c, 0xb9, 0x46, 0x3c, 0x0d, 0x70, 0xa4, 0x0b, 0x63, 0xb3, 0xca, 0x91, 0x8e, 0x1d, 0xe4,
	0xc0, 0x4d, 0x96, 0x7d, 0x14, 0x87, 0xd8, 0x1a, 0x33, 0xe4, 0x32, 0x47, 0xfe, 0x78, 0x3e, 0x53,
	0xeb, 0x7d, 0xea, 0x0e, 0xf8, 0x3e, 0x47, 0x3f, 0xbc, 0x18, 0x3d, 0xe7, 0x60, 0xd6, 0x49, 0xb6,
	0x70, 0x50, 0x03, 0xaa, 0x81, 0x35, 0x25, 0xd4, 0x72, 0x1a, 0x95, 0x76, 0xe5, 0x60, 0xcf, 0x4c,
	0x97, 0xda, 0xd7, 0xb0, 0x97, 0x66, 0x19, 0x4d, 0x48, 0x8c, 0x1e, 0x80, 0xcc, 0x88, 0xe0, 0x09,
	0xd6, 0x3b, 0xf7, 0x75, 0x51, 0x8c, 0x94, 0x3a, 0x76, 0x45, 0xcf, 0x8f, 0xc3, 0xe9, 0x63, 0x1c,
	0x5b, 0x5d, 0xf9, 0xd9, 0x4c, 0x2d, 0x99, 0xdc, 0x01, 0xbd, 0x0e, 0x3b, 0x38, 0x0c, 0x69, 0xc8,
	0x13, 0xa8, 0x99, 0xc9, 0x42, 0xfb, 0x1c, 0x6e, 0x65, 0xf0, 0x01, 0xf5, 0x23, 0x8c, 0x3e, 0x84,
	0x6a, 0xc8, 0xaf, 0x8a, 0x1a, 0x52, 0xbb, 0x72, 0x50, 0xef, 0x34, 0xf5, 0x5c, 0xc1, 0xf5, 0x7c,
	0x30, 0x02, 0x3f, 0xb5, 0xd7, 0x9e, 0x96, 0xa1, 0x6e, 0x62, 0x2b, 0x2b, 0xc8, 0x23, 0x90, 0x5d,
	0x12, 0xf9, 0x3c, 0x56, 0xb9, 0xdb, 0x99, 0xcf, 0x54, 0xf9, 0xb3, 0xfe, 0xe0, 0xe4, 0xc5, 0x4c,
	0x7d, 0xeb, 0x62, 0xae, 0x98, 0xa5, 0xc9, 0xfd, 0x0b, 0x85, 0x2d, 0x6f, 0xad, 0xb0, 0x95, 0x2d,
	0x14, 0x56, 0xfb, 0x55, 0x82, 0xbd, 0x84, 0x12, 0x41, 0xef, 0xab, 0xe2, 0xe4, 0x11, 0xc8, 0x84,
	0xe1, 0x94, 0x97, 0x38, 0xfd, 0x4b, 0xe3, 0xf4, 0x39, 0x0e, 0xf3, 0x2f, 0x2a, 0x4f, 0xca, 0x2b,
	0xef, 0xef, 0x32, 0xdc, 0x1e, 0x4c, 0xec, 0x68, 0x14, 0x7a, 0x36, 0x4e, 0x4b, 0xfa, 0x04, 0x80,
	0x5d, 0x7f, 0x6a, 0x63, 0xd7, 0x4b, 0x93, 0x78, 0x30, 0x9f, 0xa9, 0x35, 0x16, 0x5a, 0x97, 0x6d,
	0x6e, 0x90, 0x49, 0x8d, 0x41, 0x71, 0x27, 0xf4, 0x25, 0xec, 0x72, 0x5c, 0xec, 0x3b, 0x22, 0xa5,
	0xf7, 0x59, 0x89, 0x99, 0x59, 0xcf, 0x77, 0x36, 0xc0, 0xac, 0x32, 0x98, 0x9e, 0xef, 0x14, 0x44,
	0x53, 0xd9, 0x9a, 0x68, 0xe4, 0x6d, 0x88, 0xe6, 0x37, 0x09, 0x5e, 0xcb, 0x31, 0x7f, 0xe5, 0x94,
	0xf3, 0x4f, 0x19, 0x50, 0x16, 0xff, 0x90, 0x5e, 0x83, 0xfe, 0xfc, 0x04, 0x80, 0x2c, 0x65, 0x5f,
	0x59, 0xca, 0xbe, 0xbf, 0x99, 0xec, 0x39, 0x7d, 0x35, 0x92, 0x97, 0x3d, 0x49, 0x65, 0x2f, 0x2f,
	0x65, 0xdf, 0xdf, 0x44, 0xf6, 0x1c, 0xb3, 0x4a, 0x12, 0xd9, 0x6b, 0x03, 0xd8, 0x2f, 0x50, 0x2f,
	0xc4, 0xf3, 0x10, 0x6a, 0x8c, 0x26, 0xcc, 0x9e, 0x06, 0xf1, 0x76, 0x34, 0xd7, 0xbe, 0x1d, 0xa2,
	0xaf, 0xef, 0x12, 0xb1, 0xd6, 0x7e, 0x91, 0xe0, 0xce, 0x30, 0xf4, 0xc6, 0x47, 0x38, 0x08, 0xf1,
	0xc8, 0x8a, 0xf1, 0x76, 0xdf, 0xdc, 0x54, 0xe9, 0xe5, 0xff, 0xa7, 0x74, 0xed, 0x77, 0x09, 0x1a,
	0x59, 0x49, 0x1f, 0x8b, 0xf1, 0xe1, 0xea, 0xab, 0x51, 0xfb, 0x11, 0x9a, 0x2b, 0xd2, 0x12, 0x95,
	0xfe, 0x06, 0xee, 0xe4, 0x42, 0x70, 0x30, 0x93, 0x42, 0x10, 0xd3, 0x50, 0x54, 0xfd, 0xcd, 0x55,
	0x55, 0x4f, 0xa0, 0x8e, 0x32, 0x5b, 0x21, 0x80, 0x7d, 0xf2, 0xf2, 0x91, 0xf6, 0xa7, 0x04, 0x6a,
	0xe6, 0x62, 0xe2, 0x80, 0x78, 0x23, 0xeb, 0x1a, 0x71, 0xfb, 0x93, 0x04, 0xed, 0xf5, 0xe9, 0x09,
	0x8e, 0x47, 0x80, 0x72, 0xa1, 0x84, 0x89, 0x95, 0x20, 0xd8, 0x28, 0x8c, 0x4b, 0xeb, 0xa0, 0x5e,
	0xe2, 0xfa, 0x36, 0x39, 0x67, 0xd9, 0xf9, 0xb7, 0x02, 0x3b, 0x7d, 0xea, 0x1e, 0x7f, 0x81, 0x3e,
	0x85, 0x1b, 0xc9, 0xd8, 0x85, 0x94, 0x95, 0xb3, 0x18, 0x27, 0x5d, 0xb9, 0xb7, 0x7a, 0x4e, 0xe3,
	0x11, 0x6b, 0x25, 0xf4, 0x11, 0xc8, 0x6c, 0x10, 0x41, 0x8d, 0x82, 0x59, 0x6e, 0x5c, 0x53, 0x9a,
	0x2b, 0x4e, 0x32, 0xf7, 0x13, 0xa8, 0x65, 0x7d, 0x05, 0xdd, 0x2f, 0x58, 0x9e, 0x1f, 0x12, 0x94,
	0xd6, 0xba, 0xe3, 0x14, 0xed, 0x5d, 0x09, 0x0d, 0xa1, 0x9e, 0xeb, 0x53, 0x48, 0x5d, 0xed, 0x92,
	0x3d, 0x1e, 0x4a, 0x7b, 0xbd, 0x41, 0x0e, 0xf5, 0x04, 0x6e, 0x15, 0xfb, 0x14, 0xd2, 0x0a, 0x7e,
	0x2b, 0x9b, 0x98, 0xf2, 0x86, 0x9e, 0xfc, 0x96, 0xe8, 0xe9, 0x6f, 0x89, 0xde, 0x63, 0xbf, 0x25,
	0x5a, 0x09, 0x4d, 0x73, 0x0d, 0xe4, 0x5c, 0x05, 0xd1, 0x3b, 0x97, 0x2a, 0x74, 0x7a, 0xc7, 0xe1,
	0x25, 0xad, 0xd3, 0x64, 0xba, 0x0f, 0x9f, 0xcd, 0x5b, 0xd2, 0xf3, 0x79, 0x4b, 0x7a, 0xba, 0x68,
	0x95, 0x7e, 0x5e, 0xb4, 0xa4, 0xe7, 0x8b, 0x56, 0xe9, 0x8f, 0x45, 0xab, 0xf4, 0x95, 0xb6, 0x56,
	0xde, 0xd9, 0x1f, 0x9b, 0x7d, 0x83, 0x7f, 0xbf, 0xf7, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb7,
	0xee, 0x16, 0xb1, 0xc6, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LogIOClient is the client API for LogIO service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogIOClient interface {
	// Append stores a list of log entries to the end of the log stream specified
	// by AppendRequest. The log entries are appended partially; that is, some of
	// the log entries could not be stored due to failures.
	//
	// It returns the following gRPC errors:
	// - InvalidArgument: AppendRequest has invalid fields; for instance, TopicID
	// is invalid.
	// - NotFound: The log stream replica specified by the AppendRequest does not
	// exist in the storage node. Note that it does not mean that the log stream
	// does not exist in the cluster.
	// - FailedPrecondition: The log stream may be sealed; thus, clients cannot
	// write the log entry. Clients should unseal the log stream to append a log
	// entry to the log stream.
	// - Unavailable: The storage node is shutting down, or the log stream replica
	// is not primary.
	// - Canceled: The client canceled the request.
	// - DeadlineExceeded: The client's timeout has expired.
	//
	// FIXME: Partial failures are not specified by the gRPC error codes.
	Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendResponse, error)
	// Read reads a log entry from the log stream specified by ReadRequest.
	// Deprecated: Use Subscribe or SubscribeTo.
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error)
	// Subscribe reads a range of log entries specified by SubscribeRequest.
	//
	// It returns the following gRPC errors:
	// - NotFound: The log stream replica specified by the SubscribeRequest does
	// not exist in the storage node. Note that it does not mean that the log
	// stream does not exist in the cluster.
	// - Unavailable: The storage node is shutting down.
	// - InvalidArgument: The range is invalid; for example, the beginning of the
	// range is greater than or equal to the end.
	// - OutOfRange: The parts or whole range are already trimmed.
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (LogIO_SubscribeClient, error)
	// SubscribeTo is similar to Subscribe except that it specifies the range with
	// LLSN.
	SubscribeTo(ctx context.Context, in *SubscribeToRequest, opts ...grpc.CallOption) (LogIO_SubscribeToClient, error)
	TrimDeprecated(ctx context.Context, in *TrimDeprecatedRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// LogStreamReplicaMetadata returns metadata of the log stream replica
	// specified by the LogStreamReplicaMetadataRequest.
	LogStreamReplicaMetadata(ctx context.Context, in *LogStreamReplicaMetadataRequest, opts ...grpc.CallOption) (*LogStreamReplicaMetadataResponse, error)
}

type logIOClient struct {
	cc *grpc.ClientConn
}

func NewLogIOClient(cc *grpc.ClientConn) LogIOClient {
	return &logIOClient{cc}
}

func (c *logIOClient) Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendResponse, error) {
	out := new(AppendResponse)
	err := c.cc.Invoke(ctx, "/varlog.snpb.LogIO/Append", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logIOClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	out := new(ReadResponse)
	err := c.cc.Invoke(ctx, "/varlog.snpb.LogIO/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logIOClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (LogIO_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LogIO_serviceDesc.Streams[0], "/varlog.snpb.LogIO/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &logIOSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LogIO_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type logIOSubscribeClient struct {
	grpc.ClientStream
}

func (x *logIOSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *logIOClient) SubscribeTo(ctx context.Context, in *SubscribeToRequest, opts ...grpc.CallOption) (LogIO_SubscribeToClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LogIO_serviceDesc.Streams[1], "/varlog.snpb.LogIO/SubscribeTo", opts...)
	if err != nil {
		return nil, err
	}
	x := &logIOSubscribeToClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LogIO_SubscribeToClient interface {
	Recv() (*SubscribeToResponse, error)
	grpc.ClientStream
}

type logIOSubscribeToClient struct {
	grpc.ClientStream
}

func (x *logIOSubscribeToClient) Recv() (*SubscribeToResponse, error) {
	m := new(SubscribeToResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *logIOClient) TrimDeprecated(ctx context.Context, in *TrimDeprecatedRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/varlog.snpb.LogIO/TrimDeprecated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logIOClient) LogStreamReplicaMetadata(ctx context.Context, in *LogStreamReplicaMetadataRequest, opts ...grpc.CallOption) (*LogStreamReplicaMetadataResponse, error) {
	out := new(LogStreamReplicaMetadataResponse)
	err := c.cc.Invoke(ctx, "/varlog.snpb.LogIO/LogStreamReplicaMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogIOServer is the server API for LogIO service.
type LogIOServer interface {
	// Append stores a list of log entries to the end of the log stream specified
	// by AppendRequest. The log entries are appended partially; that is, some of
	// the log entries could not be stored due to failures.
	//
	// It returns the following gRPC errors:
	// - InvalidArgument: AppendRequest has invalid fields; for instance, TopicID
	// is invalid.
	// - NotFound: The log stream replica specified by the AppendRequest does not
	// exist in the storage node. Note that it does not mean that the log stream
	// does not exist in the cluster.
	// - FailedPrecondition: The log stream may be sealed; thus, clients cannot
	// write the log entry. Clients should unseal the log stream to append a log
	// entry to the log stream.
	// - Unavailable: The storage node is shutting down, or the log stream replica
	// is not primary.
	// - Canceled: The client canceled the request.
	// - DeadlineExceeded: The client's timeout has expired.
	//
	// FIXME: Partial failures are not specified by the gRPC error codes.
	Append(context.Context, *AppendRequest) (*AppendResponse, error)
	// Read reads a log entry from the log stream specified by ReadRequest.
	// Deprecated: Use Subscribe or SubscribeTo.
	Read(context.Context, *ReadRequest) (*ReadResponse, error)
	// Subscribe reads a range of log entries specified by SubscribeRequest.
	//
	// It returns the following gRPC errors:
	// - NotFound: The log stream replica specified by the SubscribeRequest does
	// not exist in the storage node. Note that it does not mean that the log
	// stream does not exist in the cluster.
	// - Unavailable: The storage node is shutting down.
	// - InvalidArgument: The range is invalid; for example, the beginning of the
	// range is greater than or equal to the end.
	// - OutOfRange: The parts or whole range are already trimmed.
	Subscribe(*SubscribeRequest, LogIO_SubscribeServer) error
	// SubscribeTo is similar to Subscribe except that it specifies the range with
	// LLSN.
	SubscribeTo(*SubscribeToRequest, LogIO_SubscribeToServer) error
	TrimDeprecated(context.Context, *TrimDeprecatedRequest) (*types.Empty, error)
	// LogStreamReplicaMetadata returns metadata of the log stream replica
	// specified by the LogStreamReplicaMetadataRequest.
	LogStreamReplicaMetadata(context.Context, *LogStreamReplicaMetadataRequest) (*LogStreamReplicaMetadataResponse, error)
}

// UnimplementedLogIOServer can be embedded to have forward compatible implementations.
type UnimplementedLogIOServer struct {
}

func (*UnimplementedLogIOServer) Append(ctx context.Context, req *AppendRequest) (*AppendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Append not implemented")
}
func (*UnimplementedLogIOServer) Read(ctx context.Context, req *ReadRequest) (*ReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (*UnimplementedLogIOServer) Subscribe(req *SubscribeRequest, srv LogIO_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedLogIOServer) SubscribeTo(req *SubscribeToRequest, srv LogIO_SubscribeToServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeTo not implemented")
}
func (*UnimplementedLogIOServer) TrimDeprecated(ctx context.Context, req *TrimDeprecatedRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrimDeprecated not implemented")
}
func (*UnimplementedLogIOServer) LogStreamReplicaMetadata(ctx context.Context, req *LogStreamReplicaMetadataRequest) (*LogStreamReplicaMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogStreamReplicaMetadata not implemented")
}

func RegisterLogIOServer(s *grpc.Server, srv LogIOServer) {
	s.RegisterService(&_LogIO_serviceDesc, srv)
}

func _LogIO_Append_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogIOServer).Append(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/varlog.snpb.LogIO/Append",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogIOServer).Append(ctx, req.(*AppendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogIO_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogIOServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/varlog.snpb.LogIO/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogIOServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogIO_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogIOServer).Subscribe(m, &logIOSubscribeServer{stream})
}

type LogIO_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type logIOSubscribeServer struct {
	grpc.ServerStream
}

func (x *logIOSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _LogIO_SubscribeTo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeToRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogIOServer).SubscribeTo(m, &logIOSubscribeToServer{stream})
}

type LogIO_SubscribeToServer interface {
	Send(*SubscribeToResponse) error
	grpc.ServerStream
}

type logIOSubscribeToServer struct {
	grpc.ServerStream
}

func (x *logIOSubscribeToServer) Send(m *SubscribeToResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _LogIO_TrimDeprecated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrimDeprecatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogIOServer).TrimDeprecated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/varlog.snpb.LogIO/TrimDeprecated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogIOServer).TrimDeprecated(ctx, req.(*TrimDeprecatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogIO_LogStreamReplicaMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogStreamReplicaMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogIOServer).LogStreamReplicaMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/varlog.snpb.LogIO/LogStreamReplicaMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogIOServer).LogStreamReplicaMetadata(ctx, req.(*LogStreamReplicaMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LogIO_serviceDesc = grpc.ServiceDesc{
	ServiceName: "varlog.snpb.LogIO",
	HandlerType: (*LogIOServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Append",
			Handler:    _LogIO_Append_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _LogIO_Read_Handler,
		},
		{
			MethodName: "TrimDeprecated",
			Handler:    _LogIO_TrimDeprecated_Handler,
		},
		{
			MethodName: "LogStreamReplicaMetadata",
			Handler:    _LogIO_LogStreamReplicaMetadata_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _LogIO_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeTo",
			Handler:       _LogIO_SubscribeTo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/snpb/log_io.proto",
}

func (m *AppendRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppendRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppendRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		for iNdEx := len(m.Payload) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Payload[iNdEx])
			copy(dAtA[i:], m.Payload[iNdEx])
			i = encodeVarintLogIo(dAtA, i, uint64(len(m.Payload[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.LogStreamID != 0 {
		i = encodeVarintLogIo(dAtA, i, uint64(m.LogStreamID))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicID != 0 {
		i = encodeVarintLogIo(dAtA, i, uint64(m.TopicID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AppendResult) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppendResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppendResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintLogIo(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLogIo(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AppendResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppendResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppendResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Results) > 0 {
		for iNdEx := len(m.Results) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Results[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLogIo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReadRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReadRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LogStreamID != 0 {
		i = encodeVarintLogIo(dAtA, i, uint64(m.LogStreamID))
		i--
		dAtA[i] = 0x18
	}
	if m.TopicID != 0 {
		i = encodeVarintLogIo(dAtA, i, uint64(m.TopicID))
		i--
		dAtA[i] = 0x10
	}
	if m.GLSN != 0 {
		i = encodeVarintLogIo(dAtA, i, uint64(m.GLSN))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReadResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReadResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintLogIo(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x1a
	}
	if m.LLSN != 0 {
		i = encodeVarintLogIo(dAtA, i, uint64(m.LLSN))
		i--
		dAtA[i] = 0x10
	}
	if m.GLSN != 0 {
		i = encodeVarintLogIo(dAtA, i, uint64(m.GLSN))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SubscribeRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LogStreamID != 0 {
		i = encodeVarintLogIo(dAtA, i, uint64(m.LogStreamID))
		i--
		dAtA[i] = 0x20
	}
	if m.TopicID != 0 {
		i = encodeVarintLogIo(dAtA, i, uint64(m.TopicID))
		i--
		dAtA[i] = 0x18
	}
	if m.GLSNEnd != 0 {
		i = encodeVarintLogIo(dAtA, i, uint64(m.GLSNEnd))
		i--
		dAtA[i] = 0x10
	}
	if m.GLSNBegin != 0 {
		i = encodeVarintLogIo(dAtA, i, uint64(m.GLSNBegin))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SubscribeResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintLogIo(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x1a
	}
	if m.LLSN != 0 {
		i = encodeVarintLogIo(dAtA, i, uint64(m.LLSN))
		i--
		dAtA[i] = 0x10
	}
	if m.GLSN != 0 {
		i = encodeVarintLogIo(dAtA, i, uint64(m.GLSN))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SubscribeToRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeToRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeToRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LLSNEnd != 0 {
		i = encodeVarintLogIo(dAtA, i, uint64(m.LLSNEnd))
		i--
		dAtA[i] = 0x20
	}
	if m.LLSNBegin != 0 {
		i = encodeVarintLogIo(dAtA, i, uint64(m.LLSNBegin))
		i--
		dAtA[i] = 0x18
	}
	if m.LogStreamID != 0 {
		i = encodeVarintLogIo(dAtA, i, uint64(m.LogStreamID))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicID != 0 {
		i = encodeVarintLogIo(dAtA, i, uint64(m.TopicID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SubscribeToResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeToResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeToResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LogEntry.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLogIo(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TrimDeprecatedRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrimDeprecatedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrimDeprecatedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GLSN != 0 {
		i = encodeVarintLogIo(dAtA, i, uint64(m.GLSN))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicID != 0 {
		i = encodeVarintLogIo(dAtA, i, uint64(m.TopicID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LogStreamMetadataRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogStreamMetadataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogStreamMetadataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LogStreamID != 0 {
		i = encodeVarintLogIo(dAtA, i, uint64(m.LogStreamID))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicID != 0 {
		i = encodeVarintLogIo(dAtA, i, uint64(m.TopicID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LogStreamMetadataResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogStreamMetadataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogStreamMetadataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LogStreamDescriptor.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLogIo(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *LogStreamReplicaMetadataRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogStreamReplicaMetadataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogStreamReplicaMetadataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LogStreamID != 0 {
		i = encodeVarintLogIo(dAtA, i, uint64(m.LogStreamID))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicID != 0 {
		i = encodeVarintLogIo(dAtA, i, uint64(m.TopicID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LogStreamReplicaMetadataResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogStreamReplicaMetadataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogStreamReplicaMetadataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LogStreamReplica.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLogIo(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintLogIo(dAtA []byte, offset int, v uint64) int {
	offset -= sovLogIo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AppendRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicID != 0 {
		n += 1 + sovLogIo(uint64(m.TopicID))
	}
	if m.LogStreamID != 0 {
		n += 1 + sovLogIo(uint64(m.LogStreamID))
	}
	if len(m.Payload) > 0 {
		for _, b := range m.Payload {
			l = len(b)
			n += 1 + l + sovLogIo(uint64(l))
		}
	}
	return n
}

func (m *AppendResult) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Meta.ProtoSize()
	n += 1 + l + sovLogIo(uint64(l))
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovLogIo(uint64(l))
	}
	return n
}

func (m *AppendResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.ProtoSize()
			n += 1 + l + sovLogIo(uint64(l))
		}
	}
	return n
}

func (m *ReadRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GLSN != 0 {
		n += 1 + sovLogIo(uint64(m.GLSN))
	}
	if m.TopicID != 0 {
		n += 1 + sovLogIo(uint64(m.TopicID))
	}
	if m.LogStreamID != 0 {
		n += 1 + sovLogIo(uint64(m.LogStreamID))
	}
	return n
}

func (m *ReadResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GLSN != 0 {
		n += 1 + sovLogIo(uint64(m.GLSN))
	}
	if m.LLSN != 0 {
		n += 1 + sovLogIo(uint64(m.LLSN))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovLogIo(uint64(l))
	}
	return n
}

func (m *SubscribeRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GLSNBegin != 0 {
		n += 1 + sovLogIo(uint64(m.GLSNBegin))
	}
	if m.GLSNEnd != 0 {
		n += 1 + sovLogIo(uint64(m.GLSNEnd))
	}
	if m.TopicID != 0 {
		n += 1 + sovLogIo(uint64(m.TopicID))
	}
	if m.LogStreamID != 0 {
		n += 1 + sovLogIo(uint64(m.LogStreamID))
	}
	return n
}

func (m *SubscribeResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GLSN != 0 {
		n += 1 + sovLogIo(uint64(m.GLSN))
	}
	if m.LLSN != 0 {
		n += 1 + sovLogIo(uint64(m.LLSN))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovLogIo(uint64(l))
	}
	return n
}

func (m *SubscribeToRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicID != 0 {
		n += 1 + sovLogIo(uint64(m.TopicID))
	}
	if m.LogStreamID != 0 {
		n += 1 + sovLogIo(uint64(m.LogStreamID))
	}
	if m.LLSNBegin != 0 {
		n += 1 + sovLogIo(uint64(m.LLSNBegin))
	}
	if m.LLSNEnd != 0 {
		n += 1 + sovLogIo(uint64(m.LLSNEnd))
	}
	return n
}

func (m *SubscribeToResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LogEntry.ProtoSize()
	n += 1 + l + sovLogIo(uint64(l))
	return n
}

func (m *TrimDeprecatedRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicID != 0 {
		n += 1 + sovLogIo(uint64(m.TopicID))
	}
	if m.GLSN != 0 {
		n += 1 + sovLogIo(uint64(m.GLSN))
	}
	return n
}

func (m *LogStreamMetadataRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicID != 0 {
		n += 1 + sovLogIo(uint64(m.TopicID))
	}
	if m.LogStreamID != 0 {
		n += 1 + sovLogIo(uint64(m.LogStreamID))
	}
	return n
}

func (m *LogStreamMetadataResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LogStreamDescriptor.ProtoSize()
	n += 1 + l + sovLogIo(uint64(l))
	return n
}

func (m *LogStreamReplicaMetadataRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicID != 0 {
		n += 1 + sovLogIo(uint64(m.TopicID))
	}
	if m.LogStreamID != 0 {
		n += 1 + sovLogIo(uint64(m.LogStreamID))
	}
	return n
}

func (m *LogStreamReplicaMetadataResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LogStreamReplica.ProtoSize()
	n += 1 + l + sovLogIo(uint64(l))
	return n
}

func sovLogIo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLogIo(x uint64) (n int) {
	return sovLogIo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AppendRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogIo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppendRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppendRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicID", wireType)
			}
			m.TopicID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicID |= github_com_kakao_varlog_pkg_types.TopicID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogStreamID", wireType)
			}
			m.LogStreamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogStreamID |= github_com_kakao_varlog_pkg_types.LogStreamID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLogIo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLogIo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload, make([]byte, postIndex-iNdEx))
			copy(m.Payload[len(m.Payload)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogIo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogIo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppendResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogIo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppendResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppendResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogIo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogIo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogIo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogIo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogIo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogIo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppendResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogIo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppendResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppendResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogIo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogIo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, AppendResult{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogIo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogIo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogIo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GLSN", wireType)
			}
			m.GLSN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GLSN |= github_com_kakao_varlog_pkg_types.GLSN(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicID", wireType)
			}
			m.TopicID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicID |= github_com_kakao_varlog_pkg_types.TopicID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogStreamID", wireType)
			}
			m.LogStreamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogStreamID |= github_com_kakao_varlog_pkg_types.LogStreamID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogIo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogIo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogIo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GLSN", wireType)
			}
			m.GLSN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GLSN |= github_com_kakao_varlog_pkg_types.GLSN(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LLSN", wireType)
			}
			m.LLSN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LLSN |= github_com_kakao_varlog_pkg_types.LLSN(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLogIo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLogIo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogIo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogIo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogIo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GLSNBegin", wireType)
			}
			m.GLSNBegin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GLSNBegin |= github_com_kakao_varlog_pkg_types.GLSN(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GLSNEnd", wireType)
			}
			m.GLSNEnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GLSNEnd |= github_com_kakao_varlog_pkg_types.GLSN(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicID", wireType)
			}
			m.TopicID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicID |= github_com_kakao_varlog_pkg_types.TopicID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogStreamID", wireType)
			}
			m.LogStreamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogStreamID |= github_com_kakao_varlog_pkg_types.LogStreamID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogIo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogIo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogIo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GLSN", wireType)
			}
			m.GLSN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GLSN |= github_com_kakao_varlog_pkg_types.GLSN(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LLSN", wireType)
			}
			m.LLSN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LLSN |= github_com_kakao_varlog_pkg_types.LLSN(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLogIo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLogIo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogIo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogIo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeToRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogIo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeToRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeToRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicID", wireType)
			}
			m.TopicID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicID |= github_com_kakao_varlog_pkg_types.TopicID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogStreamID", wireType)
			}
			m.LogStreamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogStreamID |= github_com_kakao_varlog_pkg_types.LogStreamID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LLSNBegin", wireType)
			}
			m.LLSNBegin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LLSNBegin |= github_com_kakao_varlog_pkg_types.LLSN(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LLSNEnd", wireType)
			}
			m.LLSNEnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LLSNEnd |= github_com_kakao_varlog_pkg_types.LLSN(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogIo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogIo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeToResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogIo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeToResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeToResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogEntry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogIo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogIo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LogEntry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogIo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogIo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrimDeprecatedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogIo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrimDeprecatedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrimDeprecatedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicID", wireType)
			}
			m.TopicID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicID |= github_com_kakao_varlog_pkg_types.TopicID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GLSN", wireType)
			}
			m.GLSN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GLSN |= github_com_kakao_varlog_pkg_types.GLSN(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogIo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogIo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogStreamMetadataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogIo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogStreamMetadataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogStreamMetadataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicID", wireType)
			}
			m.TopicID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicID |= github_com_kakao_varlog_pkg_types.TopicID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogStreamID", wireType)
			}
			m.LogStreamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogStreamID |= github_com_kakao_varlog_pkg_types.LogStreamID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogIo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogIo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogStreamMetadataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogIo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogStreamMetadataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogStreamMetadataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogStreamDescriptor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogIo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogIo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LogStreamDescriptor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogIo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogIo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogStreamReplicaMetadataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogIo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogStreamReplicaMetadataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogStreamReplicaMetadataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicID", wireType)
			}
			m.TopicID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicID |= github_com_kakao_varlog_pkg_types.TopicID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogStreamID", wireType)
			}
			m.LogStreamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogStreamID |= github_com_kakao_varlog_pkg_types.LogStreamID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogIo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogIo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogStreamReplicaMetadataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogIo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogStreamReplicaMetadataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogStreamReplicaMetadataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogStreamReplica", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogIo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogIo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LogStreamReplica.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogIo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogIo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLogIo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLogIo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogIo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLogIo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLogIo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLogIo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLogIo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLogIo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLogIo = fmt.Errorf("proto: unexpected end of group")
)
